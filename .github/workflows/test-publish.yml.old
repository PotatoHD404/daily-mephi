name: 'Test and deploy'
on: push
env:
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  SHADOW_DATABASE_URL: ${{ secrets.SHADOW_DATABASE_URL }}
jobs:
  # jest:
  #   name: 'Jest tests'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Install modules
  #       run: yarn
  #     - name: Run tests
  #       run: yarn test
  #  chromatic:
  #    name: 'Chromatic Deployment'
  #    # Operating System
  #    runs-on: ubuntu-latest
  #    # Job steps
  #    steps:
  #      - uses: actions/checkout@v1
  #      - run: yarn
  #        #ðŸ‘‡ Adds Chromatic as a step in the workflow
  #      - uses: chromaui/action@v1
  #        # Options required for Chromatic's GitHub Action
  #        with:
  #          #ðŸ‘‡ Chromatic projectToken, see https://storybook.js.org/tutorials/intro-to-storybook/react/en/deploy/ to obtain it
  #          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
  #          token: ${{ secrets.GITHUB_TOKEN }}
  deploy:
    name: 'Deploy on cloud'
    if: ${{ github.ref == 'refs/heads/main' }}
    #    needs: [ jest, chromatic ]
    # needs: [ jest ]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
      - name: Pull Terraform CLI
        uses: hashicorp/setup-terraform@v2
      - name: Add .terraformrc
        run: echo 'provider_installation {
          network_mirror {
          url = "https://terraform-mirror.yandexcloud.net/"
          include = ["registry.terraform.io/*/*"]
          }
          direct {
          exclude = ["registry.terraform.io/*/*"]
          }
          }' > ~/.terraformrc
      - name: Configure AWS Credentials
        run: |
          rm -rf ~/.aws
          mkdir -p ~/.aws
          echo '[default]
            aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}' > ~/.aws/credentials
          echo '[default]
            region=ru-central1' > ~/.aws/config

      - name: Install Yandex Cloud CLI
        run: curl https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash

      - name: Add Yandex Cloud CLI to $PATH
        run: echo "$HOME/yandex-cloud/bin" >> $GITHUB_PATH

      - name: Init Yandex Cloud CLI
        run: |
          yc config profile create github-actions
          yc config set cloud-id ${{ secrets.YC_CLOUD_ID }}
          yc config set folder-id ${{ secrets.YC_FOLDER_ID }}
          yc config set token ${{ secrets.YC_TOKEN }}
      - name: Install tf-next
        run: |
          npm i -g tf-next@canary
      - name: Create .env file
        run: |
          echo DATABASE_URL="${{secrets.TF_VAR_DATABASE_URL}}" >> .env
          echo LOCAL = "${{secrets.TF_VAR_LOCAL}}" >> .env
          
          echo NEXTAUTH_SECRET="${{secrets.TF_VAR_NEXTAUTH_SECRET}}" >> .env          
          echo HASH_SECRET="${{secrets.TF_VAR_HASH_SECRET}}" >> .env
          echo HASH_SALT="${{secrets.TF_VAR_HASH_SALT}}" >> .env
          echo HASH_MEMORY_COST="${{secrets.TF_VAR_HASH_MEMORY_COST}}" >> .env
          echo HASH_TYPE="${{secrets.TF_VAR_HASH_TYPE}}" >> .env
          echo HASH_TIME_COST="${{secrets.TF_VAR_HASH_TIME_COST}}" >> .env
          echo HASH_PARALLELISM="${{secrets.TF_VAR_HASH_PARALLELISM}}" >> .env
          echo AES_NONCE="${{secrets.TF_VAR_AES_NONCE}}" >> .env
          echo AES_KEY256="${{secrets.TF_VAR_AES_KEY256}}" >> .env
          echo NEXTAUTH_URL="${{secrets.TF_VAR_NEXTAUTH_URL}}" >> .env
          echo JWT_PRIVATE="{{secrets.TF_VAR_JWT_PRIVATE}}" >> .env
          echo NOTION_TOKEN="${{secrets.TF_VAR_NOTION_TOKEN}}" >> .env
          echo NOTION_PRIVATE_PAGE="${{secrets.TF_VAR_NOTION_PRIVATE_PAGE}}" >> .env
          echo NOTION_TOKEN_V2="${{secrets.TF_VAR_NOTION_TOKEN_V2}}" >> .env
          echo NOTION_EMAIL="${{secrets.TF_VAR_NOTION_EMAIL}}" >> .env
          echo NOTION_PASSWORD="${{secrets.TF_VAR_NOTION_PASSWORD}}" >> .env
          echo RECAPTCHA_SECRET="${{secrets.TF_VAR_RECAPTCHA_SECRET}}" >> .env
          echo RECAPTCHA_PUBLIC="${{secrets.TF_VAR_RECAPTCHA_PUBLIC}}" >> .env
          echo DATABASE_KEY="${{secrets.TF_VAR_DATABASE_KEY}}" >> .env
          
          echo GOOGLE_API_KEY=" ${{secrets.TF_VAR_GOOGLE_API_KEY}}" >> .env
      - name: Create .tfvars file
        run: |
          echo token = "${{ secrets.TF_VAR_TOKEN }}" >> .tfvars
          echo cloud_id = "${{ secrets.TF_VAR_CLOUD_ID }}" >> .tfvars
          echo folder_id = "${{ secrets.TF_VAR_FOLDER_ID }}" >> .tfvars
          echo zone = "${{ secrets.TF_VAR_ZONE }}" >> .tfvars
          echo DOMAIN_ID = "${{ secrets.TF_VAR_DOMAIN_ID }}" >> .tfvars
      - name: Run Terraform init
        run: |
          cd terraform
          chmod +x hash.sh
          terraform init \
          -backend-config="access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" \
          -backend-config="secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}"
      - name: Run Terraform apply
        run: |
          cd terraform
          terraform apply -input=false -var-file=".tfvars" --auto-approve
