// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions", "fullTextSearch", "fullTextIndex"]
  binaryTargets   = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([type, provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String?    @unique @db.String(50)
  imageId       String?    @unique @db.Uuid
  role          String     @default("default")
  email         String?    @unique
  emailVerified DateTime?
  createdAt     DateTime   @default(now())
  rating        Float      @default(0) @db.Float8
  bio           String?    @db.String(150)
  image         File?      @relation("userImage", fields: [imageId], references: [id])
  accounts      Account[]
  sessions      Session[]
  comments      Comment[]
  reviews       Review[]
  rates         Rate[]
  reactions     Reaction[]
  files         File[]
  materials     Material[]
  quotes        Quote[]
  Document      Document[]

  @@index([rating(sort: "Desc")])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Comment {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  text       String
  createdAt  DateTime @default(now())
  userId     String   @db.Uuid
  reviewId   String?  @db.Uuid
  materialId String?  @db.Uuid
  newsId     String?  @db.Uuid
  parentId   String?  @db.Uuid

  likes    Int   @default(0)
  dislikes Int   @default(0)
  score    Float @default(0) @db.Float8

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  review    Review?    @relation(map: "reviews_comments", fields: [reviewId], references: [id], onDelete: Cascade)
  material  Material?  @relation(map: "materials_comments", fields: [materialId], references: [id], onDelete: Cascade)
  news      News?      @relation(map: "news_comments", fields: [newsId], references: [id], onDelete: Cascade)
  parent    Comment?   @relation(name: "comment_parents", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  comments  Comment[]  @relation(name: "comment_parents")
  reactions Reaction[]

  @@index([score(sort: "Desc")])
  @@index([createdAt])
  @@index([userId])
  @@index([reviewId])
  @@index([materialId])
  @@index([newsId])
  @@index([parentId])
}

model Discipline {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String     @unique @db.String(400)
  tutors    Tutor[]
  materials Material[]
}

model Faculty {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String     @unique @db.String(200)
  tutors    Tutor[]
  materials Material[]
}

model File {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  url        String   @db.String(2000)
  altUrl     String?  @db.String(2000)
  createdAt  DateTime @default(now())
  filename   String   @db.String(500)
  userId     String?  @db.Uuid
  tutorId    String?  @db.Uuid
  materialId String?  @db.Uuid
  tag        String?  @db.String(200)
  size       Int      @default(0)

  user       User?     @relation("userImage")
  tutor      Tutor?    @relation(fields: [tutorId], references: [id])
  uploadedBy User?     @relation(fields: [userId], references: [id])
  material   Material? @relation(fields: [materialId], references: [id])

  @@index([userId])
  @@index([tutorId])
  @@index([materialId])
  @@index([createdAt])
}

model Material {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  text      String?
  title     String    @db.String(280)
  userId    String?   @db.Uuid
  tutorId   String?   @db.Uuid
  createdAt DateTime? @default(now())

  likes        Int   @default(0)
  dislikes     Int   @default(0)
  score        Float @default(0) @db.Float8
  commentCount Int   @default(0)

  files       File[]
  user        User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  tutor       Tutor?       @relation(fields: [tutorId], references: [id], onDelete: Cascade)
  faculties   Faculty[]
  disciplines Discipline[]
  comments    Comment[]
  reactions   Reaction[]
  semesters   Semester[]
  Document    Document[]

  @@index([score(sort: "Desc")])
  @@index([createdAt])
  @@index([userId])
  @@index([tutorId])
}

model Semester {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String     @unique @db.Char(3)
  materials Material[]
}

model News {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  text         String
  title        String   @db.String(280)
  createdAt    DateTime @default(now())
  likes        Int      @default(0)
  dislikes     Int      @default(0)
  commentCount Int      @default(0)

  comments  Comment[]
  reactions Reaction[]
  Document  Document[]

  @@index([createdAt])
}

model LegacyRating {
  id               String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  personality      Float
  personalityCount Int
  exams            Float
  examsCount       Int
  quality          Float
  qualityCount     Int
  tutorId          String @unique @db.Uuid
  avgRating        Float  @db.Float8
  ratingCount      Int

  tutor Tutor @relation(fields: [tutorId], references: [id], onDelete: Cascade)

  @@index([tutorId])
  @@index([personality])
  @@index([personalityCount])
  @@index([exams])
  @@index([examsCount])
  @@index([quality])
  @@index([qualityCount])
  @@index([avgRating])
  @@index([ratingCount])
}

model Rating {
  id          String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tutorId     String @unique @db.Uuid
  punctiality Float
  personality Float
  exams       Float
  quality     Float
  ratingCount Int    @default(0)
  avgRating   Float  @db.Float8
  tutor       Tutor  @relation(fields: [tutorId], references: [id], onDelete: Cascade)

  @@index([tutorId])
  @@index([personality])
  @@index([exams])
  @@index([quality])
  @@index([punctiality])
  @@index([avgRating])
  @@index([ratingCount])
}

model Quote {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  text      String
  tutorId   String    @db.Uuid
  userId    String?   @db.Uuid
  createdAt DateTime? @default(now())

  likes    Int   @default(0)
  dislikes Int   @default(0)
  score    Float @default(0) @db.Float8

  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tutor     Tutor      @relation(fields: [tutorId], references: [id], onDelete: Cascade)
  reactions Reaction[]
  Document  Document[]

  @@index([score(sort: "Desc")])
  @@index([createdAt])
  @@index([userId])
  @@index([tutorId])
}

model Rate {
  id          String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  punctuality Int
  personality Int
  exams       Int
  quality     Int
  tutorId     String @db.Uuid
  userId      String @db.Uuid

  tutor Tutor @relation(fields: [tutorId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, tutorId])
  @@index([userId])
  @@index([tutorId])
}

model Review {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title          String   @db.String(280)
  text           String
  createdAt      DateTime @default(now())
  legacyNickname String?  @db.String(200)
  userId         String?  @db.Uuid
  tutorId        String   @db.Uuid

  likes        Int   @default(0)
  dislikes     Int   @default(0)
  score        Float @default(0) @db.Float8
  commentCount Int   @default(0)

  tutor     Tutor      @relation(fields: [tutorId], references: [id], onDelete: Cascade)
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments  Comment[]
  reactions Reaction[]
  Document  Document[]

  @@unique([userId, tutorId])
  @@index([score(sort: "Desc")])
  @@index([createdAt])
  @@index([userId])
  @@index([tutorId])
}

model Reaction {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String   @db.Uuid
  quoteId    String?  @db.Uuid
  materialId String?  @db.Uuid
  reviewId   String?  @db.Uuid
  commentId  String?  @db.Uuid
  newsId     String?  @db.Uuid
  createdAt  DateTime @default(now())
  like       Boolean

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  quote    Quote?    @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  material Material? @relation(fields: [materialId], references: [id], onDelete: Cascade)
  review   Review?   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  comment  Comment?  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  news     News?     @relation(fields: [newsId], references: [id], onDelete: Cascade)

  @@unique([userId, quoteId])
  @@unique([userId, materialId])
  @@unique([userId, reviewId])
  @@unique([userId, commentId])
  @@unique([userId, newsId])
  @@index([userId])
  @@index([quoteId])
  @@index([materialId])
  @@index([reviewId])
  @@index([commentId])
  @@index([newsId])
}

// full text search model

model Document {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  words      String[]
  grams      String[]
  userId     String?  @unique @db.Uuid
  tutorId    String?  @unique @db.Uuid
  materialId String?  @unique @db.Uuid
  reviewId   String?  @unique @db.Uuid
  quoteId    String?  @unique @db.Uuid
  newsId     String?  @unique @db.Uuid

  user     User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tutor    Tutor?    @relation(fields: [tutorId], references: [id], onDelete: Cascade)
  material Material? @relation(fields: [materialId], references: [id], onDelete: Cascade)
  review   Review?   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  quote    Quote?    @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  news     News?     @relation(fields: [newsId], references: [id], onDelete: Cascade)

  @@index([words], type: Gin)
}

model Tutor {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firstName  String?   @db.String(64)
  lastName   String?   @db.String(64)
  fatherName String?   @db.String(64)
  nickName   String?   @unique @db.String(64)
  url        String?
  updatedAt  DateTime? @updatedAt

  score Float @default(0) @db.Float8

  images       File[]
  rates        Rate[]
  reviews      Review[]
  disciplines  Discipline[]
  faculties    Faculty[]
  materials    Material[]
  legacyRating LegacyRating?
  quotes       Quote[]
  document     Document[]
  rating       Rating?

  @@index([score])
}

model Internal {
  name    String    @id @db.String(200)
  value   String
  expires DateTime?
}
