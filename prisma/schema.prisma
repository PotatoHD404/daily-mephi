generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
  binaryTargets   = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid
  userId            String    @map("user_id") @db.Uuid
  type              String    @map("type")
  provider          String    @map("provider_type")
  providerAccountId String    @map("provider_account_id")
  refresh_token     String?   @map("refresh_token")
  access_token      String?   @map("access_token")
  expires_at        Int?      @map("expires_at")
  token_type        String?   @map("token_type")
  scope             String?   @map("scope")
  id_token          String?   @map("id_token")
  session_state     String?   @map("session_state")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  deletedAt         DateTime? @map("deleted_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, name: "users_accounts")

  @@unique([provider, providerAccountId])
  @@index([type, provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid
  sessionToken String    @unique @map("session_token")
  userId       String    @map("user_id") @db.Uuid
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")
  expires      DateTime  @map("expires_at")
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade, name: "users_sessions")

  @@index([userId])
  @@map("sessions")
}

model User {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid
  nickname        String?   @unique @map("nickname") @db.String(50)
  imageId         String?   @unique @map("image_id") @db.Uuid
  role            String    @default("default") @map("role")
  email           String?   @unique @map("email")
  emailVerified   DateTime? @map("email_verified")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  deletedAt       DateTime? @map("deleted_at")
  rating          Float     @default(0) @map("rating") @db.Float8
  bio             String?   @map("bio") @db.String(150)
  image           File?     @relation(fields: [imageId], references: [id], name: "users_images")
  place           Int       @default(sequence(start: 1)) @map("place")
  likes_count     Int       @default(0) @map("likes_count")
  dislikes_count  Int       @default(0) @map("dislikes_count")
  comments_count  Int       @default(0) @map("comments_count")
  materials_count Int       @default(0) @map("materials_count")
  reviews_count   Int       @default(0) @map("reviews_count")

  accounts  Account[]  @relation(name: "users_accounts")
  sessions  Session[]  @relation(name: "users_sessions")
  comments  Comment[]  @relation(name: "users_comments")
  reviews   Review[]   @relation(name: "users_reviews")
  rates     Rate[]     @relation(name: "users_rates")
  reactions Reaction[] @relation(name: "users_reactions")
  files     File[]     @relation(name: "users_files")
  materials Material[] @relation(name: "users_materials")
  quotes    Quote[]    @relation(name: "users_quotes")
  Document  Document[] @relation(name: "users_documents")
  score     Float      @default(0) @map("score")

  @@index([rating(sort: Desc)])
  @@map("users")
}

model VerificationToken {
  id        String    @map("id")
  token     String    @unique @map("token")
  expires   DateTime  @map("expires_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@unique([id, token])
  @@map("verification_tokens")
}

model Comment {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid
  text          String    @map("text")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  deletedAt     DateTime? @map("deleted_at")
  userId        String    @map("user_id") @db.Uuid
  reviewId      String?   @map("review_id") @db.Uuid
  materialId    String?   @map("material_id") @db.Uuid
  newsId        String?   @map("news_id") @db.Uuid
  parentId      String?   @map("parent_id") @db.Uuid
  path          String[]  @map("path")
  likesCount    Int       @default(0) @map("likes_count")
  dislikesCount Int       @default(0) @map("dislikes_count")
  commentsCount Int       @default(0) @map("comments_count")
  score         Float     @default(0) @map("score")

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade, name: "users_comments")
  review    Review?    @relation(fields: [reviewId], references: [id], onDelete: Cascade, name: "reviews_comments")
  material  Material?  @relation(fields: [materialId], references: [id], onDelete: Cascade, name: "materials_comments")
  news      News?      @relation(fields: [newsId], references: [id], onDelete: Cascade, name: "news_comments")
  parent    Comment?   @relation(fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction, name: "comments_parents")
  comments  Comment[]  @relation(name: "comments_parents")
  reactions Reaction[] @relation(name: "comments_reactions")

  @@index([createdAt])
  @@index([userId])
  @@index([reviewId])
  @@index([materialId])
  @@index([newsId])
  @@index([parentId])
  // gin index for path
  @@index([path], type: Gin)
  @@map("comments")
}

model Discipline {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid
  name      String     @unique @map("name") @db.String(400)
  tutors    Tutor[]    @relation(name: "tutors_disciplines")
  materials Material[] @relation(name: "materials_disciplines")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  deletedAt DateTime?  @map("deleted_at")

  @@map("disciplines")
}

model Faculty {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid
  name      String     @unique @map("name") @db.String(200)
  tutors    Tutor[]    @relation(name: "tutors_faculties")
  materials Material[] @relation(name: "materials_faculties")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  deletedAt DateTime?  @map("deleted_at")

  @@map("faculties")
}

model File {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid
  url        String    @map("url") @db.String(2000)
  altUrl     String?   @map("alt_url") @db.String(2000)
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")
  filename   String    @map("filename") @db.String(500)
  userId     String?   @map("user_id") @db.Uuid
  tutorId    String?   @map("tutor_id") @db.Uuid
  materialId String?   @map("material_id") @db.Uuid
  tag        String?   @map("tag") @db.String(200)
  size       Int       @default(0) @map("size")

  user       User?     @relation(name: "users_images")
  tutor      Tutor?    @relation(fields: [tutorId], references: [id], name: "tutors_images")
  uploadedBy User?     @relation(fields: [userId], references: [id], name: "users_files", map: "files_uploaded_by_id_fkey")
  material   Material? @relation(fields: [materialId], references: [id], name: "materials_files")

  @@index([userId])
  @@index([tutorId])
  @@index([materialId])
  @@index([createdAt])
  @@map("files")
}

model Material {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid
  text          String?   @map("text")
  title         String    @map("title") @db.String(280)
  userId        String?   @map("user_id") @db.Uuid
  tutorId       String?   @map("tutor_id") @db.Uuid
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  deletedAt     DateTime? @map("deleted_at")
  likesCount    Int       @default(0) @map("likes_count")
  dislikesCount Int       @default(0) @map("dislikes_count")
  commentsCount Int       @default(0) @map("comments_count")
  score         Float     @default(0) @map("score")

  files       File[]       @relation(name: "materials_files")
  user        User?        @relation(fields: [userId], references: [id], onDelete: Cascade, name: "users_materials")
  tutor       Tutor?       @relation(fields: [tutorId], references: [id], onDelete: Cascade, name: "tutors_materials")
  faculties   Faculty[]    @relation(name: "materials_faculties")
  disciplines Discipline[] @relation(name: "materials_disciplines")
  comments    Comment[]    @relation(name: "materials_comments")
  reactions   Reaction[]   @relation(name: "materials_reactions")
  semesters   Semester[]   @relation(name: "materials_semesters")
  Document    Document[]   @relation(name: "materials_documents")

  @@index([createdAt])
  @@index([userId])
  @@index([tutorId])
  @@map("materials")
}

model Semester {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid
  name      String     @unique @map("name") @db.Char(3)
  materials Material[] @relation(name: "materials_semesters")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  deletedAt DateTime?  @map("deleted_at")

  @@map("semesters")
}

model News {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid
  text          String    @map("text")
  title         String    @map("title") @db.String(280)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  deletedAt     DateTime? @map("deleted_at")
  likesCount    Int       @default(0) @map("likes_count")
  dislikesCount Int       @default(0) @map("dislikes_count")
  commentsCount Int       @default(0) @map("comments_count")

  comments  Comment[]  @relation(name: "news_comments")
  reactions Reaction[] @relation(name: "news_reactions")
  Document  Document[] @relation(name: "news_documents")

  @@index([createdAt])
  @@map("news")
}

model Quote {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid
  text          String    @map("text")
  tutorId       String    @map("tutor_id") @db.Uuid
  userId        String?   @map("user_id") @db.Uuid
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  deletedAt     DateTime? @map("deleted_at")
  likesCount    Int       @default(0) @map("likes_count")
  dislikesCount Int       @default(0) @map("dislikes_count")
  score         Float     @default(0) @map("score")

  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade, name: "users_quotes")
  tutor     Tutor      @relation(fields: [tutorId], references: [id], onDelete: Cascade, name: "tutors_quotes")
  reactions Reaction[] @relation(name: "quotes_reactions")
  Document  Document[] @relation(name: "quotes_documents")

  @@index([createdAt])
  @@index([userId])
  @@index([tutorId])
  @@map("quotes")
}

model Review {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid
  title          String    @map("title") @db.String(280)
  text           String    @map("text")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  deletedAt      DateTime? @map("deleted_at")
  legacyNickname String?   @map("legacy_nickname") @db.String(200)
  userId         String?   @map("user_id") @db.Uuid
  tutorId        String    @map("tutor_id") @db.Uuid
  likesCount     Int       @default(0) @map("likes_count")
  dislikesCount  Int       @default(0) @map("dislikes_count")
  commentsCount  Int       @default(0) @map("comments_count")
  score          Float     @default(0) @map("score")

  tutor     Tutor      @relation(fields: [tutorId], references: [id], onDelete: Cascade, name: "tutors_reviews")
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade, name: "users_reviews")
  comments  Comment[]  @relation(name: "reviews_comments")
  reactions Reaction[] @relation(name: "reviews_reactions")
  Document  Document[] @relation(name: "reviews_documents")

  @@unique([userId, tutorId])
  @@index([createdAt])
  @@index([userId])
  @@index([tutorId])
  @@map("reviews")
}

model Reaction {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid
  userId     String    @map("user_id") @db.Uuid
  quoteId    String?   @map("quote_id") @db.Uuid
  materialId String?   @map("material_id") @db.Uuid
  reviewId   String?   @map("review_id") @db.Uuid
  commentId  String?   @map("comment_id") @db.Uuid
  newsId     String?   @map("news_id") @db.Uuid
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")
  like       Boolean   @map("like")

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade, name: "users_reactions")
  quote    Quote?    @relation(fields: [quoteId], references: [id], onDelete: Cascade, name: "quotes_reactions")
  material Material? @relation(fields: [materialId], references: [id], onDelete: Cascade, name: "materials_reactions")
  review   Review?   @relation(fields: [reviewId], references: [id], onDelete: Cascade, name: "reviews_reactions")
  comment  Comment?  @relation(fields: [commentId], references: [id], onDelete: Cascade, name: "comments_reactions")
  news     News?     @relation(fields: [newsId], references: [id], onDelete: Cascade, name: "news_reactions")

  @@unique([userId, quoteId])
  @@unique([userId, materialId])
  @@unique([userId, reviewId])
  @@unique([userId, commentId])
  @@unique([userId, newsId])
  @@index([userId])
  @@index([quoteId])
  @@index([materialId])
  @@index([reviewId])
  @@index([commentId])
  @@index([newsId])
  @@map("reactions")
}

// full text search model

model Document {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid
  words      String[]  @map("words")
  text       String    @map("text")
  userId     String?   @unique @map("user_id") @db.Uuid
  tutorId    String?   @unique @map("tutor_id") @db.Uuid
  materialId String?   @unique @map("material_id") @db.Uuid
  reviewId   String?   @unique @map("review_id") @db.Uuid
  quoteId    String?   @unique @map("quote_id") @db.Uuid
  newsId     String?   @unique @map("news_id") @db.Uuid
  type       String    @default("unknown") @map("type")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")
  score      Float     @default(0) @map("score")

  user     User?     @relation(fields: [userId], references: [id], onDelete: Cascade, name: "users_documents")
  tutor    Tutor?    @relation(fields: [tutorId], references: [id], onDelete: Cascade, name: "tutors_documents")
  material Material? @relation(fields: [materialId], references: [id], onDelete: Cascade, name: "materials_documents")
  review   Review?   @relation(fields: [reviewId], references: [id], onDelete: Cascade, name: "reviews_documents")
  quote    Quote?    @relation(fields: [quoteId], references: [id], onDelete: Cascade, name: "quotes_documents")
  news     News?     @relation(fields: [newsId], references: [id], onDelete: Cascade, name: "news_documents")

  @@index([words], type: Gin)
  @@index([type])
  @@map("documents")
}

model Tutor {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid
  firstName      String?   @map("first_name") @db.String(64)
  lastName       String?   @map("last_name") @db.String(64)
  fatherName     String?   @map("father_name") @db.String(64)
  fullName       String    @default(dbgenerated()) @map("full_name") @db.String(256)
  shortName      String    @default(dbgenerated()) @map("short_name") @db.String(80)
  nickname       String?   @unique @map("nickname") @db.String(64)
  url            String?   @unique @map("url") @db.String(64)
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  deletedAt      DateTime? @map("deleted_at")
  reviewsCount   Int       @default(0) @map("reviews_count")
  materialsCount Int       @default(0) @map("materials_count")
  quotesCount    Int       @default(0) @map("quotes_count")
  ratesCount     Int       @default(0) @map("rates_count")
  score          Float     @default(0) @map("score")

  images       File[]        @relation(name: "tutors_images")
  rates        Rate[]        @relation(name: "tutors_rates")
  reviews      Review[]      @relation(name: "tutors_reviews")
  disciplines  Discipline[]  @relation(name: "tutors_disciplines")
  faculties    Faculty[]     @relation(name: "tutors_faculties")
  materials    Material[]    @relation(name: "tutors_materials")
  legacyRating LegacyRating? @relation(name: "tutors_legacy_ratings")
  rating       Rating?       @relation(name: "tutors_ratings")
  quotes       Quote[]       @relation(name: "tutors_quotes")
  document     Document[]    @relation(name: "tutors_documents")

  @@index([fullName])
  @@index([shortName])
  @@map("tutors")
}

model Rate {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid
  punctuality Int       @map("punctuality")
  personality Int       @map("personality")
  exams       Int       @map("exams")
  quality     Int       @map("quality")
  tutorId     String    @map("tutor_id") @db.Uuid
  userId      String    @map("user_id") @db.Uuid
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  tutor Tutor @relation(fields: [tutorId], references: [id], onDelete: Cascade, name: "tutors_rates")
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade, name: "users_rates")

  @@unique([userId, tutorId])
  @@index([userId])
  @@index([tutorId])
  @@map("rates")
}

model LegacyRating {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid
  personality      Float     @map("personality")
  personalityCount Int       @map("personality_count")
  exams            Float     @map("exams")
  examsCount       Int       @map("exams_count")
  quality          Float     @map("quality")
  qualityCount     Int       @map("quality_count")
  tutorId          String    @unique @map("tutor_id") @db.Uuid
  avgRating        Float     @map("avg_rating") @db.Float8
  avgQuality       Float     @map("avg_quality") @db.Float8
  avgPersonality   Float     @map("avg_personality") @db.Float8
  avgExams         Float     @map("avg_exams") @db.Float8
  ratingCount      Int       @map("rating_count")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")
  deletedAt        DateTime? @map("deleted_at")

  tutor Tutor @relation(fields: [tutorId], references: [id], onDelete: Cascade, name: "tutors_legacy_ratings")

  @@index([tutorId])
  @@index([personality])
  @@index([personalityCount])
  @@index([exams])
  @@index([examsCount])
  @@index([quality])
  @@index([qualityCount])
  @@index([avgRating])
  @@index([ratingCount])
  @@map("legacy_ratings")
}

model Rating {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid
  punctuality      Float     @map("punctuality")
  punctualityCount Int       @map("punctuality_count")
  personality      Float     @map("personality")
  personalityCount Int       @map("personality_count")
  exams            Float     @map("exams")
  examsCount       Int       @map("exams_count")
  quality          Float     @map("quality")
  qualityCount     Int       @map("quality_count")
  tutorId          String    @unique @map("tutor_id") @db.Uuid
  avgRating        Float     @map("avg_rating") @db.Float8
  avgQuality       Float     @map("avg_quality") @db.Float8
  avgPersonality   Float     @map("avg_personality") @db.Float8
  avgPunctuality   Float     @map("avg_punctuality") @db.Float8
  avgExams         Float     @map("avg_exams") @db.Float8
  ratingCount      Int       @map("rating_count")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")
  deletedAt        DateTime? @map("deleted_at")

  tutor Tutor @relation(fields: [tutorId], references: [id], onDelete: Cascade, name: "tutors_ratings")

  @@index([tutorId])
  @@index([personality])
  @@index([personalityCount])
  @@index([punctuality])
  @@index([punctualityCount])
  @@index([exams])
  @@index([examsCount])
  @@index([quality])
  @@index([qualityCount])
  @@index([avgRating])
  @@index([ratingCount])
  @@map("ratings")
}

model Internal {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid
  name      String    @unique @map("name")
  value     String    @map("value")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  expiresAt DateTime? @map("expires_at")

  @@index([name])
  @@map("internals")
}

// CREATE INDEX "documents_text_idx" ON "documents" USING GIN("text" gin_trgm_ops);
