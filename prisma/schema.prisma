generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions", "fullTextSearch", "fullTextIndex"]
  binaryTargets   = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRESQL_URL")
}

model accounts {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id           String    @db.Uuid
  type              String    @db.VarChar(255)
  provider          String    @db.VarChar(255)
  providerAccountId String    @map("provider_account_id") @db.VarChar(255)
  refresh_token     String?   @db.VarChar(255)
  access_token      String?   @db.VarChar(255)
  created_at        DateTime  @default(now()) @db.Timestamptz(0)
  updated_at        DateTime  @default(now()) @db.Timestamptz(0)
  expires_at        DateTime? @db.Timestamp(0)
  token_type        String?   @db.VarChar(255)
  scope             String?   @db.VarChar(255)
  id_token          String?   @db.VarChar(255)
  session_state     String?   @db.VarChar(255)
  users             users     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId], map: "accounts_provider_provider_accounts_id_key")
  @@index([type, provider, providerAccountId], map: "accounts_type_provider_provider_accounts_id_idx")
  @@index([user_id])
}

model comments {
  id             String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  text           String
  created_at     DateTime    @default(now()) @db.Timestamp(0)
  updated_at     DateTime    @default(now()) @db.Timestamp(0)
  deleted_at     DateTime?   @db.Timestamp(0)
  user_id        String      @db.Uuid
  review_id      String?     @db.Uuid
  material_id    String?     @db.Uuid
  news_id        String?     @db.Uuid
  parent_id      String?     @db.Uuid
  comments       comments?   @relation("commentsTocomments", fields: [parent_id], references: [id], onDelete: Cascade)
  users          users       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  materials      materials?  @relation(fields: [material_id], references: [id], onDelete: Cascade, map: "materials_comments")
  news           news?       @relation(fields: [news_id], references: [id], onDelete: Cascade, map: "news_comments")
  reviews        reviews?    @relation(fields: [review_id], references: [id], onDelete: Cascade, map: "reviews_comments")
  other_comments comments[]  @relation("commentsTocomments")
  reactions      reactions[]

  @@index([created_at])
  @@index([material_id])
  @@index([news_id])
  @@index([parent_id])
  @@index([review_id])
  @@index([user_id])
}

model disciplines {
  id                    String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                  String                  @unique @db.VarChar(400)
  materials_disciplines materials_disciplines[]
  tutors_disciplines    tutors_disciplines[]
}

model documents {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  data        String?
  user_id     String?    @unique @db.Uuid
  tutor_id    String?    @unique @db.Uuid
  material_id String?    @unique @db.Uuid
  review_id   String?    @unique @db.Uuid
  quote_id    String?    @unique @db.Uuid
  news_id     String?    @unique @db.Uuid
  type        String     @db.VarChar(20)
  created_at  DateTime   @default(now()) @db.Timestamp(0)
  updated_at  DateTime   @default(now()) @db.Timestamp(0)
  materials   materials? @relation(fields: [material_id], references: [id], onDelete: Cascade)
  news        news?      @relation(fields: [news_id], references: [id], onDelete: Cascade)
  quotes      quotes?    @relation(fields: [quote_id], references: [id], onDelete: Cascade)
  reviews     reviews?   @relation(fields: [review_id], references: [id], onDelete: Cascade)
  tutors      tutors?    @relation(fields: [tutor_id], references: [id], onDelete: Cascade)
  users       users?     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([created_at], map: "documents_created_at_key")
  @@index([data(ops: raw("gin_trgm_ops"))], map: "documents_data_idx2", type: Gin)
  @@index([type], map: "documents_type_key")
}

model faculties {
  id                  String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String                @unique @db.VarChar(200)
  materials_faculties materials_faculties[]
  tutors_faculties    tutors_faculties[]
}

model files {
  id                          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  url                         String     @db.VarChar(2000)
  alt_url                     String?    @db.VarChar(2000)
  created_at                  DateTime   @default(now()) @db.Timestamp(0)
  updated_at                  DateTime   @default(now()) @db.Timestamp(0)
  deleted_at                  DateTime?  @db.Timestamp(0)
  filename                    String     @db.VarChar(500)
  user_id                     String?    @db.Uuid
  tutor_id                    String?    @db.Uuid
  material_id                 String?    @db.Uuid
  tag                         String?    @db.VarChar(200)
  size                        Int        @default(0)
  materials                   materials? @relation(fields: [material_id], references: [id])
  tutors                      tutors?    @relation(fields: [tutor_id], references: [id])
  users_files_user_idTousers  users?     @relation("files_user_idTousers", fields: [user_id], references: [id])
  users_filesTousers_image_id users?     @relation("filesTousers_image_id")

  @@index([created_at])
  @@index([material_id])
  @@index([tutor_id])
  @@index([user_id])
}

model internals {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String    @db.VarChar(200)
  value      String
  created_at DateTime  @default(now()) @db.Timestamp(0)
  updated_at DateTime  @default(now()) @db.Timestamp(0)
  expires    DateTime? @db.Timestamp(0)
}

model legacy_ratings {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  personality       Float
  personality_count Int
  exams             Float
  exams_count       Int
  quality           Float
  quality_count     Int
  tutor_id          String   @unique @db.Uuid
  avg_rating        Float?   @default(dbgenerated("((((personality * (personality_count)::double precision) + (exams * (exams_count)::double precision)) + (quality * (quality_count)::double precision)) / NULLIF((((personality_count + exams_count) + quality_count))::double precision, (0)::double precision))"))
  rating_count      Int      @default(dbgenerated("ceil(((((personality_count + exams_count) + quality_count))::numeric / (3)::numeric))"))
  created_at        DateTime @default(now()) @db.Timestamp(0)
  updated_at        DateTime @default(now()) @db.Timestamp(0)
  tutors            tutors   @relation(fields: [tutor_id], references: [id], onDelete: Cascade)

  @@index([avg_rating])
  @@index([exams_count])
  @@index([exams])
  @@index([personality_count])
  @@index([personality])
  @@index([quality_count])
  @@index([quality])
  @@index([rating_count])
  @@index([tutor_id])
}

model materials {
  id                    String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  text                  String?
  title                 String                  @db.VarChar(280)
  user_id               String?                 @db.Uuid
  tutor_id              String?                 @db.Uuid
  created_at            DateTime                @default(now()) @db.Timestamp(0)
  updated_at            DateTime                @default(now()) @db.Timestamp(0)
  deleted_at            DateTime?               @db.Timestamp(0)
  tutors                tutors?                 @relation(fields: [tutor_id], references: [id], onDelete: Cascade)
  users                 users?                  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  comments              comments[]
  documents             documents?
  files                 files[]
  materials_disciplines materials_disciplines[]
  materials_faculties   materials_faculties[]
  materials_semesters   materials_semesters[]
  reactions             reactions[]

  @@index([created_at])
  @@index([tutor_id])
  @@index([user_id])
}

model materials_disciplines {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  discipline_id String      @db.Uuid
  material_id   String      @db.Uuid
  disciplines   disciplines @relation(fields: [discipline_id], references: [id], onDelete: Cascade)
  materials     materials   @relation(fields: [material_id], references: [id], onDelete: Cascade)

  @@unique([discipline_id, material_id], map: "materials_disciplines_discipline_id_material_id_unique")
  @@index([material_id], map: "materials_disciplines_material_id_index")
}

model materials_faculties {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  faculty_id  String    @db.Uuid
  material_id String    @db.Uuid
  faculties   faculties @relation(fields: [faculty_id], references: [id], onDelete: Cascade)
  materials   materials @relation(fields: [material_id], references: [id], onDelete: Cascade)

  @@unique([faculty_id, material_id], map: "materials_faculties_faculty_id_material_id_unique")
  @@index([material_id], map: "materials_faculties_material_id_index")
}

model materials_semesters {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  material_id String    @db.Uuid
  semester_id String    @db.Uuid
  materials   materials @relation(fields: [material_id], references: [id], onDelete: Cascade)
  semesters   semesters @relation(fields: [semester_id], references: [id], onDelete: Cascade)

  @@unique([material_id, semester_id], map: "materials_semesters_material_id_semester_id_unique")
  @@index([semester_id], map: "materials_semesters_semester_id_index")
}

model news {
  id         String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  text       String
  title      String      @db.VarChar(280)
  created_at DateTime    @default(now()) @db.Timestamp(0)
  updated_at DateTime    @default(now()) @db.Timestamp(0)
  deleted_at DateTime?   @db.Timestamp(0)
  comments   comments[]
  documents  documents?
  reactions  reactions[]

  @@index([created_at])
}

model quotes {
  id         String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  text       String
  tutor_id   String      @db.Uuid
  user_id    String?     @db.Uuid
  created_at DateTime    @default(now()) @db.Timestamp(0)
  updated_at DateTime    @default(now()) @db.Timestamp(0)
  deleted_at DateTime?   @db.Timestamp(0)
  tutors     tutors      @relation(fields: [tutor_id], references: [id], onDelete: Cascade)
  users      users?      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  documents  documents?
  reactions  reactions[]

  @@index([created_at])
  @@index([tutor_id])
  @@index([user_id])
}

model rates {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  punctuality Int
  personality Int
  exams       Int
  quality     Int
  tutor_id    String   @db.Uuid
  user_id     String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamp(0)
  updated_at  DateTime @default(now()) @db.Timestamp(0)
  tutors      tutors   @relation(fields: [tutor_id], references: [id], onDelete: Cascade)
  users       users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, tutor_id])
  @@index([tutor_id])
  @@index([user_id])
}

model reactions {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id     String     @db.Uuid
  quote_id    String?    @db.Uuid
  material_id String?    @db.Uuid
  review_id   String?    @db.Uuid
  comment_id  String?    @db.Uuid
  news_id     String?    @db.Uuid
  created_at  DateTime   @default(now()) @db.Timestamp(0)
  updated_at  DateTime   @default(now()) @db.Timestamp(0)
  liked       Boolean
  comments    comments?  @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  materials   materials? @relation(fields: [material_id], references: [id], onDelete: Cascade)
  news        news?      @relation(fields: [news_id], references: [id], onDelete: Cascade)
  quotes      quotes?    @relation(fields: [quote_id], references: [id], onDelete: Cascade)
  reviews     reviews?   @relation(fields: [review_id], references: [id], onDelete: Cascade)
  users       users      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, comment_id])
  @@unique([user_id, material_id])
  @@unique([user_id, news_id])
  @@unique([user_id, quote_id])
  @@unique([user_id, review_id])
  @@index([comment_id])
  @@index([material_id])
  @@index([news_id])
  @@index([quote_id])
  @@index([review_id])
  @@index([user_id])
}

model reviews {
  id              String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title           String      @db.VarChar(280)
  text            String
  created_at      DateTime    @default(now()) @db.Timestamp(0)
  updated_at      DateTime    @default(now()) @db.Timestamp(0)
  deleted_at      DateTime?   @db.Timestamp(0)
  legacy_nickname String?     @db.VarChar(200)
  user_id         String?     @db.Uuid
  tutor_id        String      @db.Uuid
  tutors          tutors      @relation(fields: [tutor_id], references: [id], onDelete: Cascade)
  users           users?      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  comments        comments[]
  documents       documents?
  reactions       reactions[]

  @@unique([user_id, tutor_id])
  @@index([created_at])
  @@index([tutor_id])
  @@index([user_id])
}

model semesters {
  id                  String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String                @unique @db.Char(3)
  materials_semesters materials_semesters[]
}

model sessions {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  session_token String   @unique @db.VarChar(255)
  user_id       String   @db.Uuid
  expires       DateTime @db.Timestamp(0)
  created_at    DateTime @default(now()) @db.Timestamptz(0)
  updated_at    DateTime @default(now()) @db.Timestamptz(0)
  users         users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model Tutor {
  id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name         String?              @db.VarChar(64)
  last_name          String?              @db.VarChar(64)
  father_name        String?              @db.VarChar(64)
  nick_name          String?              @unique @db.VarChar(64)
  url                String?
  full_name          String?              @default(dbgenerated("\nCASE\n    WHEN ((first_name IS NULL) AND (last_name IS NULL) AND (father_name IS NULL)) THEN NULL::text\n    ELSE (((\n    CASE\n        WHEN (last_name IS NULL) THEN ''::character varying\n        ELSE last_name\n    END)::text ||\n    CASE\n        WHEN (first_name IS NULL) THEN ''::text\n        ELSE (' '::text || (first_name)::text)\n    END) ||\n    CASE\n        WHEN (father_name IS NULL) THEN ''::text\n        ELSE (' '::text || (father_name)::text)\n    END)\nEND")) @db.VarChar(255)
  short_name         String?              @default(dbgenerated("\nCASE\n    WHEN ((first_name IS NULL) AND (last_name IS NULL) AND (father_name IS NULL)) THEN NULL::text\n    ELSE (((\n    CASE\n        WHEN (last_name IS NULL) THEN ''::character varying\n        ELSE last_name\n    END)::text ||\n    CASE\n        WHEN (first_name IS NULL) THEN ''::text\n        ELSE ((' '::text || \"left\"((first_name)::text, 1)) || '.'::text)\n    END) ||\n    CASE\n        WHEN (father_name IS NULL) THEN ''::text\n        ELSE ((' '::text || (father_name)::text) || '.'::text)\n    END)\nEND")) @db.VarChar(128)
  created_at         DateTime             @default(now()) @db.Timestamp(0)
  updated_at         DateTime             @default(now()) @db.Timestamp(0)
  deleted_at         DateTime?            @db.Timestamp(0)
  documents          documents?
  files              files[]
  legacy_ratings     legacy_ratings?
  materials          materials[]
  quotes             quotes[]
  rates              rates[]
  reviews            reviews[]
  tutors_disciplines tutors_disciplines[]
  tutors_faculties   tutors_faculties[]

  @@map("tutors")
}

model tutors_disciplines {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  discipline_id String      @db.Uuid
  tutor_id      String      @db.Uuid
  disciplines   disciplines @relation(fields: [discipline_id], references: [id], onDelete: Cascade)
  tutors        tutors      @relation(fields: [tutor_id], references: [id], onDelete: Cascade)

  @@unique([discipline_id, tutor_id], map: "tutors_disciplines_discipline_id_tutor_id_unique")
  @@index([tutor_id], map: "tutors_disciplines_tutor_id_index")
}

model tutors_faculties {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tutor_id   String    @db.Uuid
  faculty_id String    @db.Uuid
  faculties  faculties @relation(fields: [faculty_id], references: [id], onDelete: Cascade)
  tutors     tutors    @relation(fields: [tutor_id], references: [id], onDelete: Cascade)

  @@unique([tutor_id, faculty_id], map: "tutors_faculties_tutor_id_faculty_id_unique")
  @@index([faculty_id], map: "tutors_faculties_faculty_id_index")
}

model users {
  id                          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                        String?     @unique @db.VarChar(50)
  image_id                    String?     @unique @db.Uuid
  image                       String?     @default(dbgenerated("image_id")) @db.Uuid
  role                        String      @default("default") @db.VarChar(255)
  email                       String?     @unique @db.VarChar(255)
  email_verified              DateTime?   @db.Timestamp(0)
  created_at                  DateTime    @default(now()) @db.Timestamp(0)
  updated_at                  DateTime    @default(now()) @db.Timestamp(0)
  banned                      Boolean     @default(false)
  banned_reason               String?     @db.VarChar(255)
  banned_at                   DateTime?   @db.Timestamp(0)
  banned_until                DateTime?   @db.Timestamp(0)
  rating                      Float       @default(0)
  bio                         String?     @db.VarChar(150)
  files_filesTousers_image_id files?      @relation("filesTousers_image_id", fields: [image_id], references: [id])
  accounts                    accounts[]
  comments                    comments[]
  documents                   documents?
  files_files_user_idTousers  files[]     @relation("files_user_idTousers")
  materials                   materials[]
  quotes                      quotes[]
  rates                       rates[]
  reactions                   reactions[]
  reviews                     reviews[]
  sessions                    sessions[]

  @@index([rating])
}

model verification_tokens {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  identifier String
  token      String   @unique
  expires    DateTime @db.Timestamp(0)
  created_at DateTime @default(now()) @db.Timestamptz(0)
  updated_at DateTime @default(now()) @db.Timestamptz(0)

  @@unique([identifier, token])
}
